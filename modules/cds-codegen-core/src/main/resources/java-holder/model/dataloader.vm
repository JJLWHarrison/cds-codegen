#include("java-common/header.vm")
package ${packageName};

import au.org.consumerdatastandards.holder.model.${definitionName};
import au.org.consumerdatastandards.holder.repository.${definitionName}Repository;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.fasterxml.jackson.module.paramnames.ParameterNamesModule;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;

@Component
public class ${definitionName}DataLoader implements ApplicationListener<ContextRefreshedEvent> {

    private ${definitionName}Repository oneRepository;
    
    private static final Logger LOG = LogManager.getLogger(${definitionName}DataLoader.class);


    @Autowired
    public ${definitionName}DataLoader(${definitionName}Repository inputRepository) {
        this.oneRepository = inputRepository;
    }
    
    @Override
    public void onApplicationEvent(ContextRefreshedEvent contextRefreshedEvent) {
        try {
            load(String.join(",", Arrays.asList("payloads", ${definitionName}.class.getName())));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public void load(String fileOrFolder) throws IOException {

        File file = new File(fileOrFolder);
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (File oneFile : files) {
                load(oneFile.getAbsolutePath());
            }
        } else {
            LOG.info("Reading {}", file.getAbsolutePath());
            byte[] jsonData;
            try {
                jsonData = Files.readAllBytes(Paths.get(file.getCanonicalPath()));
                ObjectMapper objectMapper = new ObjectMapper()
                    .registerModule(new ParameterNamesModule())
                    .registerModule(new Jdk8Module())
                    .registerModule(new JavaTimeModule());
                ${definitionName} importValue = objectMapper.readValue(jsonData, ${definitionName}.class);

                oneRepository.save(importValue);

                LOG.info("Saved the following to database: \n{}", jsonData.toString());
            } catch (IOException e) {
                LOG.error("Failed to read: {}", file.getName());
                throw e;
            }
        }
    }
}
