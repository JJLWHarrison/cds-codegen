#include("java-common/header.vm")
package $packageName;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;
import ${modelPackage}.*;

import javax.validation.Valid;
import java.time.OffsetDateTime;
import java.util.Optional;

@Validated
@Api(value = "$sectionName")
public interface $interfaceName {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }
    
#foreach($endpoint in $cds.getEndpointModelsWithDataOperations())
    #parse("common/endpointdefinition.vm")
    
    /**
    * $endpointSummary
    * 
    * #if($endpointDescription)
    * $WordUtils.wrap($endpointDescription, 60, "
    * ", false)
    * #end
    */
    @ApiOperation(
        value = "$endpointSummary", 
        nickname = "$endpointOperationId", 
        notes = "$endpointDescription", 
        response = ${endpointDefaultResponse}.class, 
        tags = { #foreach($oneTag in $cds.getTags())"$oneTag"#if( $foreach.hasNext ),#end#end }
    )
    @ApiResponses(
        value = {
        #foreach($endpointResponse in $endpointResponses)
        #parse("common/endpointresponse.vm")
            @ApiResponse(
                code = $responseCode, 
                message = "$responseDescription", 
                response = ${responseType}.class
            )#if( $foreach.hasNext ),#end
        #end
        }
    )
    @RequestMapping(
        value = "$endpointPath", 
        produces = { "application/json" }, 
        method = RequestMethod.$endpointMethod
    )
    ResponseEntity<$endpointDefaultResponse> $endpointOperationId(
    #foreach($pathParam in $endpoint.getPathParams())
        @ApiParam(
           value = "$pathParam.getParam().description()", 
           required = $pathParam.getParam().required()
        )
        @PathVariable("$pathParam.getName()") 
        $pathParam.getParamDataType().getSimpleName() $pathParam.getName()#if( $foreach.hasNext ),#end
#end
    #foreach($queryParam in $endpoint.getQueryParams())
        @ApiParam(
           value = "$queryParam.getParam().description()"#if($queryParam.hasAllowableValues()), 
           allowableValues = "#foreach($oneValue in $queryParam.getAllowableValues())$oneValue#if( $foreach.hasNext ), #end#end"
#end
        ) 
        @Valid
        @RequestParam(
            value = "$queryParam.getName()", 
            required = false
        ) 
        $queryParam.getParamDataType().getSimpleName() $queryParam.getCamelCaseName()#if( $foreach.hasNext ),#end
    #end
    );
    
#end


}
