package $packageName;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.time.OffsetDateTime;
import java.util.Optional;

@Controller
@RequestMapping("$basePath")
public class ${interfaceName}Controller implements $interfaceName {

    private final ${interfaceName}Service service;

    private final NativeWebRequest request;

    @Autowired
    public BankingProductsApiController(NativeWebRequest request, ${interfaceName}Service service) {
        this.request = request;
        this.service = service;
    }

    @Override
    public Optional<NativeWebRequest> getRequest() {
        return Optional.ofNullable(request);
    }
    
#foreach($endpoint in $cds.getEndpointModels())
    #parse("common/endpointdefinition.vm")
    @Override
    public ResponseEntity<$endpointDefaultResponse> ${endpointOperationId}(#foreach($oneParam in $endpoint.getParamModels())
        $oneParam.getParamDataType().getSimpleName() $oneParam.getCamelCaseName()#if( $foreach.hasNext ),#end
    #end) {
        if (!WebUtil.hasSupportedVersion(request)) {
            return ResponseEntity.status(HttpStatus.NOT_ACCEPTABLE).build();
        }
        HttpHeaders headers = WebUtil.processHeaders(request);
        return new ResponseEntity<>(new ${endpointDefaultResponse}()
            .data(service.${endpointOperationId}(productId))
            .links(new Links()
                .self(WebUtil.getOriginalUrl(request))), headers, HttpStatus.OK);
    }
#end

    private Integer getPagingValue(@Valid Integer page, int defaultValue) {
        return page != null && page > 0 ? page : defaultValue;
    }
}
