#include("java-common/header.vm")
package $packageName;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import org.threeten.bp.OffsetDateTime;

import java.util.Objects;
import java.net.URI;
import java.lang.reflect.Field;
import java.util.List;
import java.math.BigDecimal;

/**
* $definitionName
*/
public class $definitionName #if($extendsOn)extends $extendsOn#end {
#foreach($field in $fieldList)
    #parse("common/datadefinition.vm")
    #if($fieldDescription)
    // $WordUtils.wrap($fieldDescription, 60, "
    // ", false)
    #end
    @SerializedName("$fieldName")
    private $fieldType $fieldName;
#end

#foreach($field in $fieldList)
    #parse("common/datadefinition.vm")
    
    @ApiModelProperty(value = "$fieldNameDescription")
    public $fieldType get$fieldNameCapital() {
        return $fieldName;
    }

    public void set$fieldNameCapital($fieldType $fieldName) {
        this.$fieldName = $fieldName;
    }
    
    public $definitionName $fieldName($fieldType $fieldName) {
        this.$fieldName = $fieldName;
        return this;
    }
    
#end

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        
        #if($extendsOn)
        if(!super.equals(o)) { return false; }
        #end
        $cds.definitionName inputModel = ($cds.definitionName) o;
#foreach($field in $fieldList)
#parse("common/datadefinition.vm")
        if(! (${fieldName}.equals(inputModel.get$fieldNameCapital()))) { return false; }
#end
        return true;
    }

    @Override
    public int hashCode() {
      return Objects.hash(#foreach($field in $fieldList)$fieldName#if( $foreach.hasNext ),#end#end);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("class %s {\n", getClass()));

        for (Field oneField : getClass().getFields()) {
            oneField.setAccessible(true);
            try {
                sb.append(String.format("    %s: %s\n", oneField.getName(), (oneField.get(Object.class) == null ? "null"
                        : oneField.get(Object.class).toString().replace("\n", "\n    "))));
            } catch (IllegalArgumentException | IllegalAccessException e) {
                // I guess we won't print it
                sb.append(String.format("    %s, [unreadable]\n", oneField.getName()));
            }
        }
        sb.append("}");
        return sb.toString();
    }
}
